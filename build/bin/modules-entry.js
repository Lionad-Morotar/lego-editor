const fs = require('fs')
const path = require('path')
const render = require('json-templater/string')
const uppercamelcase = require('uppercamelcase')
const endOfLine = require('os').EOL

/* 组装文件元信息 */

// FIXME 从 constant 引入常量 require('../../constant/index').ModuleTypeEnums.BASE
const baseType = '基础模块'
const components = require('../../modules/components.json')
const names = Object.keys(components)
const requires = []
const metas = names.map(name => {
  const upperName = uppercamelcase(name)
  const metaFile = path.join(__dirname, '../../modules', components[name], './meta.json')
  const meta = JSON.parse(fs.readFileSync(metaFile, 'utf-8'))

  requires.push(`import ${upperName} from '${components[name]}'`)
  meta.component = upperName
  meta.name = `lego-${name}`
  if (meta['is-base-category']) {
    const cates = (meta.categories || [])
    cates.unshift(baseType)
    meta.categories = cates
  }

  delete meta['is-base-category']

  return meta
})

/* 写入文件 */

const TEMPLATE = `/* Automatically generated by './build/bin/modules-entry.js' */

/* eslint-disable */

import clone from 'lodash.clonedeep'

{{requires}}

export default {
  getDefaultModuleList () {
    return clone([{{lists}}])
  }
}
`

const template = render(TEMPLATE, {
  requires: requires
    .join(endOfLine),
  lists: metas
    .map(x => JSON.stringify(x, null, '  '))
    .join(',' + endOfLine)
    .replace(/\r\n|\n|\r/g, endOfLine + '    ')
}).replace(/"component":\s"([^"]*)"/g, '"component": $1')

const SAVE_PATH = path.join(__dirname, '../../modules/index.js')
fs.writeFileSync(SAVE_PATH, template)
console.log('[build entry] DONE:', SAVE_PATH)
